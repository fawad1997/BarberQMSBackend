#!/bin/bash

# scripts/deploy.sh - Deployment script for BarberQMSBackend on DigitalOcean

set -e  # Exit on any error

# Configuration - UPDATE THESE PATHS FOR YOUR SETUP
APP_DIR="/var/www/BarberQMSBackend"  # Your app directory
SERVICE_NAME="barber-qms-backend"    # Your systemd service name
BACKUP_DIR="/var/backups/barber-qms-db"
VENV_PATH="/var/www/BarberQMSBackend/venv"  # Path to your virtual environment
APP_USER="www-data"  # User that runs the application

echo "🚀 Starting BarberQMS Backend deployment..."

# Check if running as root or with sudo
if [ "$EUID" -ne 0 ]; then
    echo "❌ Please run this script with sudo or as root"
    exit 1
fi

# Optional: Log deployment start to DigitalOcean if token is available
if [ ! -z "$DO_TOKEN" ]; then
    echo "🔧 DigitalOcean token available - logging deployment start..."
    DROPLET_TAG="barber-qms-deployment-$(date +%Y%m%d_%H%M%S)"
    # You can add DigitalOcean API calls here for logging/monitoring
    echo "📝 Deployment tag: $DROPLET_TAG"
else
    echo "ℹ️  No DigitalOcean token provided - continuing with basic deployment"
fi

# Navigate to app directory
echo "📁 Navigating to app directory: $APP_DIR"
cd $APP_DIR

echo "📥 Pulling latest code..."
git pull origin main

echo "📦 Activating virtual environment and installing dependencies..."
source $VENV_PATH/bin/activate
pip install -r requirements.txt

echo "💾 Creating database backup..."
mkdir -p $BACKUP_DIR
BACKUP_FILE="$BACKUP_DIR/backup_$(date +%Y%m%d_%H%M%S).sql"

# Create database backup (adjust connection string as needed)
if [ ! -z "$DATABASE_URL" ]; then
    pg_dump $DATABASE_URL > $BACKUP_FILE
    echo "✅ Database backup created: $BACKUP_FILE"
    
    # Keep only last 7 days of backups
    find $BACKUP_DIR -name "backup_*.sql" -mtime +7 -delete
    echo "🧹 Cleaned up old backups (kept last 7 days)"
else
    echo "⚠️  DATABASE_URL not set, skipping backup"
fi

echo "🔄 Running database migrations..."
alembic upgrade head

echo "🔧 Setting proper file permissions..."
chown -R $APP_USER:$APP_USER $APP_DIR
chmod -R 755 $APP_DIR

echo "🔄 Restarting application service..."
systemctl restart $SERVICE_NAME

echo "⏳ Waiting for application to start..."
sleep 15

echo "🏥 Running health check..."
HEALTH_CHECK_URL="http://localhost:8000/health"

if curl -f $HEALTH_CHECK_URL > /dev/null 2>&1; then
    echo "✅ Health check passed!"
    
    # Get health check response for verification
    HEALTH_RESPONSE=$(curl -s $HEALTH_CHECK_URL)
    echo "📊 Health check response: $HEALTH_RESPONSE"
    
    echo "🎉 Deployment completed successfully!"
else
    echo "❌ Health check failed!"
    echo "🔄 Attempting to restart service..."
    systemctl restart $SERVICE_NAME
    sleep 10
    
    if curl -f $HEALTH_CHECK_URL > /dev/null 2>&1; then
        echo "✅ Service recovered after restart!"
    else
        echo "❌ Service still unhealthy. Manual intervention required."
        echo "🔍 Check logs with: sudo journalctl -u $SERVICE_NAME -f"
        echo "🔍 Check service status: sudo systemctl status $SERVICE_NAME"
        exit 1
    fi
fi

echo "📊 Final service status:"
systemctl status $SERVICE_NAME --no-pager -l

echo "🌐 Testing API endpoints..."
echo "  - Root endpoint: curl http://localhost:8000/"
echo "  - Health check: curl http://localhost:8000/health"

# Optional: Send notification (uncomment and configure if needed)
# echo "📧 Sending deployment notification..."
# curl -X POST "YOUR_WEBHOOK_URL" \
#   -H "Content-Type: application/json" \
#   -d '{"text":"BarberQMS Backend deployed successfully at '$(date)'"}'

# Optional: Log successful deployment to DigitalOcean
if [ ! -z "$DO_TOKEN" ]; then
    echo "📝 Logging successful deployment to DigitalOcean..."
    # Example: Could create a deployment log or update droplet tags
    # curl -X POST "https://api.digitalocean.com/v2/droplets/$DROPLET_ID/tags" \
    #   -H "Authorization: Bearer $DO_TOKEN" \
    #   -H "Content-Type: application/json" \
    #   -d '{"name":"deployed-'$(date +%Y%m%d)'"}'
    echo "✅ DigitalOcean deployment logging completed"
fi

echo "✨ Deployment process completed!"
